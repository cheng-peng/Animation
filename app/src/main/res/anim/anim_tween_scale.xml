<?xml version="1.0" encoding="utf-8"?>


<!--duration，一次动画效果消耗的时间，单位毫秒，值越小动画速度越快-->
<!--fromXDelta,fromYDelta 起始时X，Y座标,屏幕右下角的座标是X:320,Y:480-->
<!--interpolator 指定动画插入器-->
<!--pivotX， pivotY 动画起始位置，相对于屏幕的百分比,两个都为50%表示动画从自身中间开始-->
<!--repeatCount，动画重复的计数，动画将会执行该值+1次-->
<!--repeatMode，动画重复的模式，reverse为反向，当第偶次执行时，动画方向会相反。restart为重新执行，方向不变-->
<!--startOffset， 动画多次执行的间隔时间，如果只执行一次，执行前会暂停这段时间，单位毫秒-->
<!--toXScale，toYScale， 动画最终缩放的倍数， 1.0为正常大小，大于1.0放大-->
<!--toXDelta， toYDelta 动画结束时X,Y的座标-->
<!--fromXScale,fromYScale， 动画开始前X,Y的缩放，0.0为不显示， 1.0为正常大小-->

<!--AccelerateInterpolator 加速，开始时慢中间加速-->
<!--DecelerateInterpolator 减速，开始时快然后减速-->
<!--AccelerateDecelerateInterolator 先加速后减速，开始结束时慢，中间加速-->
<!--AnticipateInterpolator 反向，先向相反方向改变一段再加速播放-->
<!--AnticipateOvershootInterpolator 反向加超越，先向相反方向改变，再加速播放，会超出目的值然后缓慢移动至目的值-->
<!--BounceInterpolator 跳跃，快到目的值时值会跳跃，如目的值100，后面的值可能依次为85，77，70，80，90，100-->
<!--CycleIinterpolator 循环，动画循环一定次数，值的改变为一正弦函数：Math.sin(2* mCycles* Math.PI* input)-->
<!--LinearInterpolator 线性，线性均匀改变-->
<!--OvershootInterpolator超越，最后超出目的值然后缓慢改变到目的值-->
<scale xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1000"
    android:fromXScale="0.0"
    android:fromYScale="0.0"
    android:interpolator="@android:anim/decelerate_interpolator"
    android:pivotX="50%"
    android:pivotY="50%"
    android:repeatCount="1"
    android:repeatMode="reverse"
    android:startOffset="0"
    android:toXScale="1.5"
    android:toYScale="1.5" />